[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "string-multitool"
version = "2.6.0"
authors = [
    {name = "String_Multitool Development Team"},
]
description = "Advanced text transformation tool with POSIX-compliant CLI, case-insensitive TSV conversion, and enterprise-grade architecture"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Text Processing",
    "Topic :: Utilities",
    "Topic :: Security :: Cryptography",
]
keywords = ["text", "transformation", "clipboard", "encryption", "rsa", "unicode", "tsv", "case-insensitive", "posix", "cli", "enterprise", "strategy-pattern"]
dependencies = [
    "pyperclip>=1.9.0",
    "watchdog>=6.0.0",
    "cryptography>=44.0.0",
    "typer>=0.16.0",
    "rich>=14.1.0",
    "typing-extensions>=4.12.2",
    "python-json-logger>=2.0.7",
    "structlog>=25.4.0",
    "sqlalchemy==2.0.43",
]

[project.optional-dependencies]
dev = [
    # Testing framework and extensions
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.14.1",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.21.0",
    # Code quality tools
    "black>=24.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
    # Security analysis
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    # Build and distribution
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
    # Development utilities
    "coverage[toml]>=7.2.0",
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
    "python-dotenv>=1.0.0",
    # System tray support (optional)
    "pystray>=0.19.5",
    "pillow>=10.4.0",
]
build = [
    "pyinstaller>=6.12.0",
]

[project.urls]
Homepage = "https://github.com/tay2501/String-Multitool"
"Bug Reports" = "https://github.com/tay2501/String-Multitool/issues"
"Source" = "https://github.com/tay2501/String-Multitool"
"Documentation" = "https://github.com/tay2501/String-Multitool#readme"

[project.scripts]
string-multitool = "String_Multitool:main"

[tool.setuptools]
py-modules = ["String_Multitool"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",                    # show extra test summary info for all except passed
    "-q",                     # quiet mode
    "--strict-markers",       # treat undefined markers as errors
    "--strict-config",        # treat config issues as errors
    "--tb=short",            # short traceback format
    "--disable-warnings",    # disable pytest warnings for cleaner output
    "--color=yes",           # force color output
    "--durations=10",        # show 10 slowest tests
    "--maxfail=5",           # stop after 5 failures
]
testpaths = [
    "test_transform.py",
    "test_tsv_case_insensitive.py", 
    "test_system_integration.py",
    "test_hotkey.py",
    "test_tsv_operations.py",
    "test_readme_examples.py",
    "test_unicode.py",
    "test_simple.py",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Modern pytest markers for comprehensive test categorization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "system: marks tests as system-level tests",
    "performance: marks tests that measure performance",
    "security: marks tests that check security features",
    "ui: marks tests for user interface components",
    "network: marks tests that require network access",
    "crypto: marks tests that use cryptographic features",
    "clipboard: marks tests that use clipboard functionality",
    "tsv: marks tests for TSV conversion functionality",
    "config: marks tests for configuration management",
    "transforms: marks tests for text transformations",
    "io: marks tests for input/output operations",
    "hotkey: marks tests for hotkey functionality",
    "daemon: marks tests for daemon mode",
    "interactive: marks tests for interactive mode",
]
# Filter out specific warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore:.*unclosed.*:ResourceWarning",
]
# Test discovery configuration  
norecursedirs = [
    "*.egg", 
    ".git", 
    ".mypy_cache", 
    ".pytest_cache",
    "__pycache__", 
    "docs", 
    "build", 
    "dist",
    ".venv",
    "venv",
]
# Timeout configuration for hanging tests (requires pytest-timeout plugin)
# timeout = 300
# timeout_method = "thread"
# Console output configuration
console_output_style = "progress"
# Log configuration for debugging
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["String_Multitool"]
omit = [
    "test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["String_Multitool"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
show_error_codes = true

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "basic"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownParameterType = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = false
stubPath = ""
venvPath = "."
venv = ".venv"

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "PL",   # pylint
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
]

[tool.ruff.per-file-ignores]
"test_*.py" = ["PLR2004"]  # magic value used in comparison

[tool.uv]
dev-dependencies = [
    "black==25.1.0",
    "isort==5.13.2",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_MATRIX: "['3.12', '3.13']"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run type checking
      run: |
        uv run mypy string_multitool/

    - name: Run code formatting check
      run: |
        uv run black --check string_multitool/
        uv run isort --check-only string_multitool/

    - name: Run tests with coverage
      run: |
        uv run pytest test_transform.py test_tsv_case_insensitive.py --cov=string_multitool --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage reports
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add --dev bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        uv run bandit -r string_multitool/ -f json -o bandit-report.json || true
        uv run bandit -r string_multitool/

    - name: Run Safety dependency scan
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run safety check

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Executable
    needs: [test, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add --dev pyinstaller

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        uv run pyinstaller --onefile --windowed --icon=resources/icon.png --name=String_Multitool_${{ runner.os }} String_Multitool.py

    - name: Build executable (Unix)
      if: runner.os != 'Windows'
      run: |
        uv run pyinstaller --onefile --icon=resources/icon.png --name=String_Multitool_${{ runner.os }} String_Multitool.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ runner.os }}
        path: dist/String_Multitool_*

  release:
    name: Create Release
    if: github.event_name == 'release'
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Create release assets
      run: |
        mkdir release-assets
        find . -name "String_Multitool_*" -type f -exec cp {} release-assets/ \;
        cd release-assets
        for file in String_Multitool_*; do
          if [[ "$file" == *"Windows"* ]]; then
            mv "$file" "${file}.exe"
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '*.md' 
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance benchmarks'
        type: boolean
        default: false
      skip_security_scans:
        description: 'Skip security analysis'
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.12'
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  # Job 1: Code Quality & Security Analysis
  quality-and-security:
    name: Quality & Security Analysis
    runs-on: windows-latest
    timeout-minutes: 20
    outputs:
      quality-status: ${{ steps.quality-check.outputs.status }}
      security-status: ${{ steps.security-check.outputs.status }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Code formatting check
      id: formatting
      run: |
        python -m black --check --diff string_multitool/ test_transform.py String_Multitool.py
        python -m isort --check-only --diff string_multitool/ test_transform.py String_Multitool.py
      continue-on-error: true
    
    - name: Type checking
      id: typing
      run: python -m mypy string_multitool/ --install-types --non-interactive
      continue-on-error: true
    
    - name: Linting
      id: linting  
      run: |
        python -m flake8 string_multitool/ test_transform.py String_Multitool.py --max-line-length=120 --extend-ignore=W503
      continue-on-error: true
    
    - name: Security analysis
      id: security-check
      run: |
        python -m bandit -r string_multitool/ String_Multitool.py -f json -o bandit-report.json
        python -m safety check --json --output safety-report.json
        echo "status=completed" >> $env:GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Quality check summary
      id: quality-check
      run: |
        $exitCode = 0
        if ('${{ steps.formatting.outcome }}' -ne 'success') { 
          Write-Host "❌ Code formatting check failed"
          $exitCode = 1
        } else { Write-Host "✅ Code formatting passed" }
        
        if ('${{ steps.typing.outcome }}' -ne 'success') { 
          Write-Host "❌ Type checking failed" 
          $exitCode = 1
        } else { Write-Host "✅ Type checking passed" }
        
        if ('${{ steps.linting.outcome }}' -ne 'success') { 
          Write-Host "❌ Linting failed"
          $exitCode = 1
        } else { Write-Host "✅ Linting passed" }
        
        if ($exitCode -eq 0) {
          Write-Host "✅ All quality checks passed"
          echo "status=success" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "❌ Some quality checks failed"
          echo "status=failure" >> $env:GITHUB_OUTPUT
        }
        exit $exitCode
    
    - name: Upload reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  # Job 2: Cross-platform Testing
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: windows-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        include:
          - python-version: '3.12'
            upload-coverage: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements*.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-timeout pytest-xdist
    
    - name: Run tests
      run: |
        python -m pytest test_transform.py --cov=string_multitool --cov-report=xml --cov-report=term-missing --junit-xml=test-results-${{ matrix.python-version }}.xml --timeout=300 -v
    
    - name: Check coverage threshold  
      if: matrix.upload-coverage
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        coverage = float(tree.getroot().attrib['line-rate']) * 100
        threshold = 70
        print(f'Coverage: {coverage:.1f}%')
        if coverage < threshold:
            print(f'❌ Coverage {coverage:.1f}% below threshold {threshold}%')
            exit(1)
        else:
            print(f'✅ Coverage {coverage:.1f}% meets threshold {threshold}%')
        "
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python${{ matrix.python-version }}
        path: |
          test-results-${{ matrix.python-version }}.xml
          coverage.xml
        retention-days: 7
    
    - name: Upload coverage
      if: matrix.upload-coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Job 3: Integration Testing
  integration-test:
    name: Integration Tests
    runs-on: windows-latest 
    timeout-minutes: 15
    needs: [quality-and-security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test CLI functionality
      run: |
        # Test basic transformations
        echo "hello world" | python String_Multitool.py /u | findstr "HELLO WORLD"
        echo "  TRIM ME  " | python String_Multitool.py /t/l | findstr "trim me"
        
        # Test help command
        python String_Multitool.py help | findstr "String_Multitool"
        
        # Test configuration loading
        python -c "from string_multitool import ConfigurationManager; print('✅ Config loaded')"
    
    - name: Test configuration files
      run: |
        python -c "
        import json
        from pathlib import Path
        
        configs = ['transformation_rules', 'security_config', 'daemon_config', 'hotkey_config']
        for config in configs:
            file_path = Path(f'config/{config}.json')
            if file_path.exists():
                with open(file_path, encoding='utf-8') as f:
                    json.load(f)  # Validate JSON
                print(f'✅ {config}.json valid')
            else:
                print(f'❌ {config}.json missing')
                exit(1)
        "

  # Job 4: Build Validation  
  build-validation:
    name: Build Validation
    runs-on: windows-latest
    timeout-minutes: 20
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Validate build prerequisites
      run: |
        # Check required files exist
        $required = @(
          'String_Multitool.py',
          'config/transformation_rules.json', 
          'config/security_config.json',
          'build.ps1'
        )
        
        foreach ($file in $required) {
          if (!(Test-Path $file)) {
            Write-Error "❌ Missing: $file"
            exit 1
          }
          Write-Host "✅ Found: $file"
        }
    
    - name: Test build script syntax
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command "& { . .\build.ps1; exit 0 }" -WhatIf
        Write-Host "✅ Build script syntax valid"
    
    - name: Dry-run PyInstaller
      run: |
        python -m PyInstaller --version
        python -m PyInstaller --dry-run --onefile String_Multitool.py
        Write-Host "✅ PyInstaller dry-run successful"

  # Job 5: Security Vulnerability Scan
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_security_scans }}
    permissions:
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
    
    - name: Upload to Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-and-security, test, integration-test, build-validation, vulnerability-scan]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Job status mapping
        quality_status="${{ needs.quality-and-security.result }}"
        test_status="${{ needs.test.result }}"
        integration_status="${{ needs.integration-test.result }}"
        build_status="${{ needs.build-validation.result }}"
        vuln_status="${{ needs.vulnerability-scan.result }}"
        
        # Function to get status emoji
        get_status_emoji() {
          case $1 in
            "success") echo "✅" ;;
            "failure") echo "❌" ;;
            "skipped") echo "⏭️" ;;
            "cancelled") echo "🚫" ;;
            *) echo "❓" ;;
          esac
        }
        
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality & Security | $(get_status_emoji $quality_status) $quality_status |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | $(get_status_emoji $test_status) $test_status |" >> $GITHUB_STEP_SUMMARY  
        echo "| Integration Tests | $(get_status_emoji $integration_status) $integration_status |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Validation | $(get_status_emoji $build_status) $build_status |" >> $GITHUB_STEP_SUMMARY
        echo "| Vulnerability Scan | $(get_status_emoji $vuln_status) $vuln_status |" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall result
        critical_failed=false
        if [[ "$quality_status" == "failure" || "$test_status" == "failure" ]]; then
          critical_failed=true
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "$critical_failed" == "true" ]]; then
          echo "❌ **Critical checks failed** - Review required" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ **All critical checks passed**" >> $GITHUB_STEP_SUMMARY
        fi
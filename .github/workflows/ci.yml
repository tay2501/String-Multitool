name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_MATRIX: "['3.10', '3.11', '3.12', '3.13']"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run type checking
      run: |
        python -m mypy string_multitool/

    - name: Run code formatting check
      run: |
        python -m black --check string_multitool/
        python -m isort --check-only string_multitool/

    - name: Run tests with coverage
      run: |
        python -m pytest test_transform.py test_tsv_case_insensitive.py --cov=string_multitool --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage reports
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        bandit -r string_multitool/ -f json -o bandit-report.json || true
        bandit -r string_multitool/

    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Executable
    needs: [test, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed --icon=resources/icon.png --name=String_Multitool_${{ runner.os }} String_Multitool.py

    - name: Build executable (Unix)
      if: runner.os != 'Windows'
      run: |
        pyinstaller --onefile --icon=resources/icon.png --name=String_Multitool_${{ runner.os }} String_Multitool.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ runner.os }}
        path: dist/String_Multitool_*

  release:
    name: Create Release
    if: github.event_name == 'release'
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release assets
      run: |
        mkdir release-assets
        find . -name "String_Multitool_*" -type f -exec cp {} release-assets/ \;
        cd release-assets
        for file in String_Multitool_*; do
          if [[ "$file" == *"Windows"* ]]; then
            mv "$file" "${file}.exe"
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
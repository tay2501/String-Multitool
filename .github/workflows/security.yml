name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write
  issues: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install security tools
        run: |
          uv sync --all-extras --dev
          uv add --dev bandit[toml] semgrep safety pip-audit

      - name: Run Bandit security analysis
        run: |
          uv run bandit -r string_multitool/ -f json -o bandit-report.json
          uv run bandit -r string_multitool/ -f sarif -o bandit-results.sarif
        continue-on-error: true

      - name: Run Semgrep security analysis
        run: |
          uv run semgrep --config=auto --json --output=semgrep-results.json string_multitool/
          uv run semgrep --config=auto --sarif --output=semgrep-results.sarif string_multitool/
        continue-on-error: true

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: |
            bandit-results.sarif
            semgrep-results.sarif
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            bandit-report.json
            bandit-results.sarif
            semgrep-results.json
            semgrep-results.sarif

  # Dependency Security Analysis
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv add --dev safety pip-audit cyclonedx-bom

      - name: Run Safety vulnerability check
        run: |
          uv run safety check --json --output safety-report.json
          uv run safety check --output safety-report.txt
        continue-on-error: true

      - name: Run pip-audit vulnerability check
        run: |
          uv run pip-audit --format=json --output=pip-audit-report.json
          uv run pip-audit --format=cyclonedx-json --output=pip-audit-cyclonedx.json
        continue-on-error: true

      - name: Generate SBOM (Software Bill of Materials)
        run: |
          uv run cyclonedx-py requirements -o sbom.json --output-format json
          uv run cyclonedx-py requirements -o sbom.xml --output-format xml

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            safety-report.json
            safety-report.txt
            pip-audit-report.json
            pip-audit-cyclonedx.json
            sbom.json
            sbom.xml

  # Container Security (if using containers)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test container image
        run: |
          cat > Dockerfile.security << 'EOF'
          FROM python:3.12-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          COPY . .
          CMD ["python", "String_Multitool.py", "help"]
          EOF
          docker build -t string-multitool:security-test -f Dockerfile.security .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'string-multitool:security-test'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload container security results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-container-results.sarif'
        continue-on-error: true

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Compliance and license check
  compliance:
    name: Compliance & License Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck
          pip install -r requirements.txt

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses-report.json
          pip-licenses --format=csv --output-file=licenses-report.csv
          licensecheck --format json > licensecheck-report.json

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            licenses-report.json
            licenses-report.csv
            licensecheck-report.json

  # Security summary
  security-summary:
    name: Security Summary
    needs: [sast, dependency-scan, secret-scan, compliance]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      issues: write

    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Analysis Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          echo "- **SAST Analysis**: ${{ needs.sast.result }}" >> security-summary.md
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- **Secret Detection**: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- **Compliance Check**: ${{ needs.compliance.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # List available reports
          echo "## Available Reports" >> security-summary.md
          echo "" >> security-summary.md
          find . -name "*.json" -o -name "*.sarif" -o -name "*.txt" | sort >> security-summary.md
          
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Create security issue (if problems found)
        if: needs.sast.result == 'failure' || needs.dependency-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const title = `Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
              const body = `
              ## Security Scan Results
              
              Automated security scans have detected potential vulnerabilities:
              
              - SAST Analysis: ${{ needs.sast.result }}
              - Dependency Scan: ${{ needs.dependency-scan.result }}
              - Secret Detection: ${{ needs.secret-scan.result }}
              
              Please review the security reports and address any critical findings.
              
              **Action Items:**
              1. Download and review security artifacts from this workflow run
              2. Address high/critical severity findings
              3. Update dependencies if vulnerabilities are found
              4. Run security scans locally before committing
              
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              `;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'priority:high']
              });
              
              console.log('Security issue created successfully');
            } catch (error) {
              console.log('Failed to create security issue:', error.message);
              console.log('This might be due to insufficient permissions or repository settings');
            }
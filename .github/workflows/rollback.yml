name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to rollback to (e.g., v2.1.0)'
        required: true
        type: string
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      confirm:
        description: 'Type "CONFIRM" to proceed with rollback'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Rollback Validation
  validate-rollback:
    name: Validate Rollback Request
    runs-on: windows-latest
    timeout-minutes: 10
    
    outputs:
      is-valid: ${{ steps.validate.outputs.is-valid }}
      target-version: ${{ steps.validate.outputs.target-version }}
      current-version: ${{ steps.validate.outputs.current-version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history to check versions
    
    - name: Validate rollback request
      id: validate
      run: |
        $confirmation = '${{ inputs.confirm }}'
        $targetVersion = '${{ inputs.version }}'
        $environment = '${{ inputs.environment }}'
        $reason = '${{ inputs.reason }}'
        
        Write-Host "üîç Validating rollback request..." -ForegroundColor Cyan
        Write-Host "   Target Version: $targetVersion"
        Write-Host "   Environment: $environment"
        Write-Host "   Reason: $reason"
        
        $isValid = $true
        $validationErrors = @()
        
        # Check confirmation
        if ($confirmation -ne 'CONFIRM') {
            $validationErrors += "Confirmation not provided. Please type 'CONFIRM' to proceed."
            $isValid = $false
        }
        
        # Validate version format
        if ($targetVersion -notmatch '^v?\d+\.\d+\.\d+(-[a-zA-Z0-9.-]+)?$') {
            $validationErrors += "Invalid version format: $targetVersion"
            $isValid = $false
        }
        
        # Check if target version exists
        $cleanVersion = $targetVersion -replace '^v', ''
        $tagExists = git tag -l | Where-Object { $_ -eq $targetVersion -or $_ -eq "v$cleanVersion" }
        if (-not $tagExists) {
            $validationErrors += "Version $targetVersion does not exist in repository"
            $isValid = $false
        }
        
        # Get current version
        $currentVersion = git describe --tags --abbrev=0 2>$null
        if (-not $currentVersion) {
            $currentVersion = "unknown"
        }
        
        # Check if we're not rolling back to the same version
        if ($targetVersion -eq $currentVersion -or "v$cleanVersion" -eq $currentVersion) {
            $validationErrors += "Target version $targetVersion is the same as current version $currentVersion"
            $isValid = $false
        }
        
        # Validate reason is provided
        if ([string]::IsNullOrWhiteSpace($reason)) {
            $validationErrors += "Rollback reason is required"
            $isValid = $false
        }
        
        # Display validation results
        if ($isValid) {
            Write-Host "‚úÖ Rollback request validation passed" -ForegroundColor Green
            Write-Host "   Rolling back from $currentVersion to $targetVersion"
        } else {
            Write-Host "‚ùå Rollback request validation failed:" -ForegroundColor Red
            foreach ($error in $validationErrors) {
                Write-Host "   - $error" -ForegroundColor Red
            }
        }
        
        echo "is-valid=$isValid" >> $env:GITHUB_OUTPUT
        echo "target-version=$targetVersion" >> $env:GITHUB_OUTPUT
        echo "current-version=$currentVersion" >> $env:GITHUB_OUTPUT
    
    - name: Create rollback log entry
      if: steps.validate.outputs.is-valid == 'true'
      run: |
        $logEntry = @{
            timestamp = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
            rollback_id = '${{ github.run_id }}'
            initiated_by = '${{ github.actor }}'
            from_version = '${{ steps.validate.outputs.current-version }}'
            to_version = '${{ steps.validate.outputs.target-version }}'
            environment = '${{ inputs.environment }}'
            reason = '${{ inputs.reason }}'
            status = 'initiated'
        }
        
        $logEntry | ConvertTo-Json -Depth 2 | Out-File -FilePath "rollback-log.json" -Encoding UTF8
        
        Write-Host "üìù Rollback log entry created"
    
    - name: Upload rollback log
      if: steps.validate.outputs.is-valid == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: rollback-log-${{ github.run_id }}
        path: rollback-log.json
        retention-days: 365  # Keep rollback logs for a year

  # Job 2: Pre-rollback Backup
  create-backup:
    name: Create Pre-rollback Backup
    runs-on: windows-latest
    timeout-minutes: 15
    needs: [validate-rollback]
    if: needs.validate-rollback.outputs.is-valid == 'true'
    
    steps:
    - name: Checkout current version
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Create backup of current state
      run: |
        Write-Host "üíæ Creating backup of current state..." -ForegroundColor Cyan
        
        $currentVersion = '${{ needs.validate-rollback.outputs.current-version }}'
        $environment = '${{ inputs.environment }}'
        $backupName = "backup-$environment-$currentVersion-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        
        # Create backup directory
        New-Item -ItemType Directory -Force -Path "backup" | Out-Null
        
        # Backup current source code
        Compress-Archive -Path @(
            "String_Multitool.py",
            "config/",
            "requirements.txt",
            "build.ps1",
            "README.md"
        ) -DestinationPath "backup/$backupName-source.zip"
        
        # If there's a current deployment, back it up too
        # This would typically involve downloading from deployment location
        
        Write-Host "‚úÖ Backup created: $backupName"
        
        # Create backup metadata
        $backupMetadata = @{
            backup_name = $backupName
            created_at = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
            version = $currentVersion
            environment = $environment
            commit_sha = '${{ github.sha }}'
            rollback_id = '${{ github.run_id }}'
        }
        
        $backupMetadata | ConvertTo-Json -Depth 2 | Out-File -FilePath "backup/$backupName-metadata.json" -Encoding UTF8
    
    - name: Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: pre-rollback-backup-${{ github.run_id }}
        path: backup/
        retention-days: 365  # Keep backups for a year

  # Job 3: Execute Rollback
  execute-rollback:
    name: Execute Rollback to ${{ needs.validate-rollback.outputs.target-version }}
    runs-on: windows-latest
    timeout-minutes: 30
    needs: [validate-rollback, create-backup]
    if: needs.validate-rollback.outputs.is-valid == 'true'
    
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.rollback.outputs.rollback-url }}
    
    steps:
    - name: Checkout target version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target-version }}
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-rollback-${{ needs.validate-rollback.outputs.target-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-rollback-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify target version
      run: |
        Write-Host "üîç Verifying target version..." -ForegroundColor Cyan
        
        $targetVersion = '${{ needs.validate-rollback.outputs.target-version }}'
        
        # Run basic tests to ensure the target version is functional
        python -m pytest test_transform.py -v --tb=short -x
        
        # Test basic functionality
        echo "Hello World" | python String_Multitool.py /u
        
        Write-Host "‚úÖ Target version $targetVersion verified as functional"
    
    - name: Build rollback version
      run: |
        Write-Host "üî® Building rollback version..." -ForegroundColor Cyan
        
        $targetVersion = '${{ needs.validate-rollback.outputs.target-version }}'
        
        # Build the target version
        .\build.ps1 -SkipTests -Clean
        
        # Add rollback metadata
        $rollbackInfo = @{
            rollback_version = $targetVersion
            previous_version = '${{ needs.validate-rollback.outputs.current-version }}'
            rollback_date = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
            rollback_reason = '${{ inputs.reason }}'
            rollback_id = '${{ github.run_id }}'
            initiated_by = '${{ github.actor }}'
            environment = '${{ inputs.environment }}'
        }
        
        $rollbackInfo | ConvertTo-Json -Depth 2 | Out-File -FilePath "dist/string-multitool-portable/rollback-info.json" -Encoding UTF8
        
        # Update ZIP with rollback info
        Compress-Archive -Path "dist/string-multitool-portable/rollback-info.json" -DestinationPath "dist/string-multitool-portable.zip" -Update
        
        Write-Host "‚úÖ Rollback version built successfully"
    
    - name: Deploy rollback version
      id: rollback
      run: |
        Write-Host "üöÄ Deploying rollback version..." -ForegroundColor Cyan
        
        $environment = '${{ inputs.environment }}'
        $targetVersion = '${{ needs.validate-rollback.outputs.target-version }}'
        
        # This is where you would implement the actual rollback deployment
        # Examples:
        # - Replace files in deployment location
        # - Update container images
        # - Restore database to previous state
        # - Update load balancer configurations
        
        if ($environment -eq 'production') {
            Write-Host "üì¶ Rolling back production deployment..."
            
            # Production rollback logic
            # aws s3 cp dist/string-multitool-portable.zip s3://releases/string-multitool/
            # kubectl set image deployment/string-multitool container=myregistry/string-multitool:$targetVersion
            
            $rollbackUrl = "https://github.com/${{ github.repository }}/releases/tag/$targetVersion"
            
        } elseif ($environment -eq 'staging') {
            Write-Host "üì¶ Rolling back staging deployment..."
            
            # Staging rollback logic
            # aws s3 cp dist/string-multitool-portable.zip s3://staging/string-multitool/
            
            $rollbackUrl = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }
        
        Write-Host "‚úÖ Rollback deployment completed"
        Write-Host "üîó Rollback URL: $rollbackUrl"
        
        echo "rollback-url=$rollbackUrl" >> $env:GITHUB_OUTPUT
    
    - name: Upload rollback artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rollback-artifacts-${{ github.run_id }}
        path: |
          dist/string-multitool-portable.zip
          dist/string-multitool-portable/
        retention-days: 90

  # Job 4: Post-rollback Verification
  verify-rollback:
    name: Verify Rollback Success
    runs-on: windows-latest
    timeout-minutes: 15
    needs: [validate-rollback, execute-rollback]
    if: needs.validate-rollback.outputs.is-valid == 'true'
    
    steps:
    - name: Checkout target version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-rollback.outputs.target-version }}
    
    - name: Download rollback artifacts
      uses: actions/download-artifact@v4
      with:
        name: rollback-artifacts-${{ github.run_id }}
        path: ./rollback-artifacts
    
    - name: Verify rollback deployment
      run: |
        Write-Host "üîç Verifying rollback deployment..." -ForegroundColor Cyan
        
        $targetVersion = '${{ needs.validate-rollback.outputs.target-version }}'
        $environment = '${{ inputs.environment }}'
        
        # Verify artifacts
        $zipPath = "rollback-artifacts/string-multitool-portable.zip"
        if (Test-Path $zipPath) {
            Write-Host "‚úÖ Rollback ZIP package found"
            
            # Extract and test
            Expand-Archive -Path $zipPath -DestinationPath "test-rollback" -Force
            $exePath = "test-rollback/String_Multitool.exe"
            
            if (Test-Path $exePath) {
                # Test executable
                & $exePath help | Out-Null
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "‚úÖ Rollback executable verified"
                } else {
                    Write-Error "‚ùå Rollback executable test failed"
                    exit 1
                }
            } else {
                Write-Error "‚ùå Rollback executable not found"
                exit 1
            }
        } else {
            Write-Error "‚ùå Rollback ZIP package not found"
            exit 1
        }
    
    - name: Run post-rollback tests
      run: |
        Write-Host "üß™ Running post-rollback tests..." -ForegroundColor Cyan
        
        # Set up test environment with rollback version
        $exePath = "test-rollback/String_Multitool.exe"
        
        # Test basic functionality
        $testResult = echo "test" | & $exePath /u
        if ($testResult -eq "TEST") {
            Write-Host "‚úÖ Basic functionality test passed"
        } else {
            Write-Error "‚ùå Basic functionality test failed"
            exit 1
        }
        
        # Test help command
        & $exePath help | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Help command test passed"
        } else {
            Write-Error "‚ùå Help command test failed"
            exit 1
        }
        
        Write-Host "‚úÖ All post-rollback tests passed"
    
    - name: Update rollback status
      run: |
        Write-Host "üìä Updating rollback status..." -ForegroundColor Cyan
        
        $rollbackStatus = @{
            rollback_id = '${{ github.run_id }}'
            status = 'completed'
            verified_at = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
            target_version = '${{ needs.validate-rollback.outputs.target-version }}'
            environment = '${{ inputs.environment }}'
            verification_results = @{
                artifacts_verified = $true
                functionality_tested = $true
                deployment_confirmed = $true
            }
        }
        
        $rollbackStatus | ConvertTo-Json -Depth 3 | Out-File -FilePath "rollback-status.json" -Encoding UTF8
        
        Write-Host "‚úÖ Rollback status updated"
    
    - name: Upload rollback status
      uses: actions/upload-artifact@v4
      with:
        name: rollback-status-${{ github.run_id }}
        path: rollback-status.json
        retention-days: 365

  # Job 5: Notification and Cleanup
  notify-and-cleanup:
    name: Notify Stakeholders and Cleanup
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [validate-rollback, execute-rollback, verify-rollback]
    if: always() && needs.validate-rollback.outputs.is-valid == 'true'
    
    steps:
    - name: Send rollback notifications
      run: |
        Write-Host "üì¢ Sending rollback notifications..." -ForegroundColor Cyan
        
        $targetVersion = '${{ needs.validate-rollback.outputs.target-version }}'
        $currentVersion = '${{ needs.validate-rollback.outputs.current-version }}'
        $environment = '${{ inputs.environment }}'
        $reason = '${{ inputs.reason }}'
        $rollbackStatus = '${{ needs.verify-rollback.result }}'
        $rollbackUrl = '${{ needs.execute-rollback.outputs.rollback-url }}'
        
        $status = if ($rollbackStatus -eq 'success') { 'SUCCESSFUL' } else { 'FAILED' }
        $icon = if ($rollbackStatus -eq 'success') { '‚úÖ' } else { '‚ùå' }
        
        Write-Host "$icon Rollback $status" -ForegroundColor $(if ($rollbackStatus -eq 'success') { 'Green' } else { 'Red' })
        Write-Host "   Environment: $environment"
        Write-Host "   From: $currentVersion"
        Write-Host "   To: $targetVersion"
        Write-Host "   Reason: $reason"
        Write-Host "   URL: $rollbackUrl"
        
        # This could be extended to send notifications to:
        # - Slack/Discord channels
        # - Email lists
        # - PagerDuty/incident management systems
        # - Status pages
        # - Monitoring dashboards
    
    - name: Create incident report
      if: needs.verify-rollback.result == 'success'
      run: |
        Write-Host "üìã Creating incident report..." -ForegroundColor Cyan
        
        $incidentReport = @{
            incident_id = '${{ github.run_id }}'
            type = 'rollback'
            severity = 'high'
            status = 'resolved'
            summary = "Emergency rollback from ${{ needs.validate-rollback.outputs.current-version }} to ${{ needs.validate-rollback.outputs.target-version }}"
            details = @{
                environment = '${{ inputs.environment }}'
                reason = '${{ inputs.reason }}'
                initiated_by = '${{ github.actor }}'
                initiated_at = '${{ github.event.head_commit.timestamp }}'
                resolved_at = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
                rollback_url = '${{ needs.execute-rollback.outputs.rollback-url }}'
            }
            timeline = @(
                @{ time = '${{ github.event.head_commit.timestamp }}'; event = 'Rollback initiated' },
                @{ time = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'); event = 'Rollback completed and verified' }
            )
        }
        
        $incidentReport | ConvertTo-Json -Depth 4 | Out-File -FilePath "incident-report.json" -Encoding UTF8
        
        Write-Host "‚úÖ Incident report created"
    
    - name: Upload incident report
      if: needs.verify-rollback.result == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: incident-report-${{ github.run_id }}
        path: incident-report.json
        retention-days: 365

  # Summary Job
  rollback-summary:
    name: Rollback Summary
    runs-on: windows-latest
    timeout-minutes: 5
    needs: [validate-rollback, create-backup, execute-rollback, verify-rollback, notify-and-cleanup]
    if: always()
    
    steps:
    - name: Generate Rollback Summary
      run: |
        Write-Host "üéØ Emergency Rollback Summary" -ForegroundColor Cyan
        Write-Host "=============================" -ForegroundColor Cyan
        
        $isValid = '${{ needs.validate-rollback.outputs.is-valid }}'
        
        if ($isValid -eq 'true') {
            $targetVersion = '${{ needs.validate-rollback.outputs.target-version }}'
            $currentVersion = '${{ needs.validate-rollback.outputs.current-version }}'
            $environment = '${{ inputs.environment }}'
            $reason = '${{ inputs.reason }}'
            
            Write-Host "üîÑ Rollback Details:" -ForegroundColor Yellow
            Write-Host "   Environment: $environment"
            Write-Host "   From Version: $currentVersion"
            Write-Host "   To Version: $targetVersion"
            Write-Host "   Reason: $reason"
            Write-Host "   Initiated By: ${{ github.actor }}"
            Write-Host "   Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
            
            $jobs = @{
                'Validation' = '${{ needs.validate-rollback.result }}'
                'Backup Creation' = '${{ needs.create-backup.result }}'
                'Rollback Execution' = '${{ needs.execute-rollback.result }}'
                'Verification' = '${{ needs.verify-rollback.result }}'
                'Notification' = '${{ needs.notify-and-cleanup.result }}'
            }
            
            Write-Host "`nüìä Job Results:" -ForegroundColor Yellow
            $allPassed = $true
            foreach ($job in $jobs.GetEnumerator()) {
                $status = $job.Value
                $icon = switch ($status) {
                    'success' { '‚úÖ' }
                    'skipped' { '‚è≠Ô∏è' }
                    default { '‚ùå'; $allPassed = $false }
                }
                Write-Host "$icon $($job.Key): $status"
            }
            
            Write-Host ""
            if ($allPassed) {
                Write-Host "üéâ Emergency rollback completed successfully!" -ForegroundColor Green
                Write-Host "üîÑ System has been rolled back to $targetVersion" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Rollback encountered issues. Manual intervention may be required." -ForegroundColor Red
                Write-Host "üíæ Pre-rollback backup is available for recovery" -ForegroundColor Yellow
                exit 1
            }
        } else {
            Write-Host "‚ùå Rollback validation failed. No changes were made." -ForegroundColor Red
            Write-Host "Please check the validation errors and try again." -ForegroundColor Yellow
        }
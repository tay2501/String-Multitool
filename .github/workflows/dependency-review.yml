# Dependency Review Workflow
# This Action will scan dependency manifest files that change as part of a Pull Request,
# surfacing known-vulnerable versions of the packages declared or updated in the PR.

name: Dependency Review

on:
  pull_request:
    paths:
      - 'pyproject.toml'
      - 'uv.lock'

permissions:
  contents: read
  pull-requests: write

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Optional: Fail the job if vulnerabilities are detected
          fail-on-severity: moderate
          
          # Optional: Allow specific licenses
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0
          
          # Optional: Deny specific licenses  
          deny-licenses: AGPL-3.0, GPL-2.0
          
          # Optional: Comment on PR with results
          comment-summary-in-pr: on-failure
          
          # Optional: Create review with results
          review-type: pull-request-review
          
          # Optional: Additional configuration
          base-ref: ${{ github.event.pull_request.base.sha }}
          head-ref: ${{ github.event.pull_request.head.sha }}

  # Additional dependency analysis
  dependency-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install analysis tools
        run: |
          uv sync --all-extras --dev
          uv add --dev pip-audit safety

      - name: Check pyproject.toml sync
        run: |
          # Verify pyproject.toml is valid
          uv check
          echo "✅ pyproject.toml and uv.lock are in sync"

      - name: Analyze dependency tree
        run: |
          uv tree > dependency-tree.txt
          echo "## Dependency Tree Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          uv tree >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check for outdated packages
        run: |
          echo "## Outdated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Using uv for dependency management - check uv.lock for current versions" >> $GITHUB_STEP_SUMMARY

      - name: Generate dependency report
        run: |
          echo "## Dependency Security Report" > dependency-report.md
          echo "" >> dependency-report.md
          
          # Run pip-audit
          uv run pip-audit --format=json --output=pip-audit.json || true
          
          # Run safety check
          uv run safety check --json --output=safety.json || true
          
          # Process results
          python -c "
          import json
          import os
          
          # Process pip-audit results
          if os.path.exists('pip-audit.json'):
              with open('pip-audit.json', 'r') as f:
                  try:
                      audit_data = json.load(f)
                      print('### Pip-Audit Results')
                      if audit_data:
                          print('Found vulnerabilities:')
                          for vuln in audit_data:
                              print(f'- **{vuln.get(\"package\", \"unknown\")}**: {vuln.get(\"description\", \"No description\")}')
                      else:
                          print('✅ No vulnerabilities found by pip-audit')
                  except json.JSONDecodeError:
                      print('⚠️ Could not parse pip-audit results')
          
          # Process safety results  
          if os.path.exists('safety.json'):
              with open('safety.json', 'r') as f:
                  try:
                      safety_data = json.load(f)
                      print('### Safety Check Results')
                      if safety_data:
                          print('Found vulnerabilities:')
                          for vuln in safety_data:
                              print(f'- **{vuln.get(\"package\", \"unknown\")}**: {vuln.get(\"advisory\", \"No advisory\")}')
                      else:
                          print('✅ No vulnerabilities found by safety')
                  except json.JSONDecodeError:
                      print('⚠️ Could not parse safety results')
          " >> dependency-report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-report
          path: |
            dependency-report.md
            pip-audit.json
            safety.json
            outdated.json
          retention-days: 30